name: Python Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'requirements.txt'
      - '.github/workflows/python-backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'requirements.txt'

jobs:
  test:
    name: Test Python Backend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      env:
        ENVIRONMENT: test
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        pytest app/ -v --cov=app --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: python-backend
        name: python-backend-coverage
  
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        pip install black flake8 isort
    
    - name: Check formatting with Black
      run: |
        black --check app/
    
    - name: Check imports with isort
      run: |
        isort --check-only app/
    
    - name: Lint with flake8
      run: |
        flake8 app/ --max-line-length=127

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Check for security vulnerabilities with Safety
      run: |
        safety check --file requirements.txt --output json || true
    
    - name: Security scan with Bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
