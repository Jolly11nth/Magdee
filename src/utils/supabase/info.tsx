/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */
/* This file gets the Supabase configuration from environment variables */

// Function to safely get environment variables
const getEnvVar = (name: string, fallback: string = ''): string => {
  try {
    // Check for Vite environment variables first
    if (typeof import.meta !== 'undefined' && import.meta.env) {
      const value = import.meta.env[name];
      if (value !== undefined) return String(value);
    }
  } catch (error) {
    // Ignore import.meta errors
  }
  
  try {
    // Check for Create React App environment variables
    if (typeof window !== 'undefined' && (window as any).__ENV__) {
      const value = (window as any).__ENV__[name];
      if (value !== undefined) return String(value);
    }
  } catch (error) {
    // Ignore window access errors
  }
  
  try {
    // Check for global process if available (Node.js environments)
    if (typeof global !== 'undefined' && global.process && global.process.env) {
      const value = global.process.env[name];
      if (value !== undefined) return String(value);
    }
  } catch (error) {
    // Ignore global access errors
  }
  
  // Check if the variable is available in window (for build-time injection)
  try {
    if (typeof window !== 'undefined' && (window as any).ENV) {
      const value = (window as any).ENV[name];
      if (value !== undefined) return String(value);
    }
  } catch (error) {
    // Ignore window access errors
  }
  
  // Fallback to default
  return fallback;
};

// Extract project ID from Supabase URL
const extractProjectId = (url: string): string => {
  try {
    const match = url.match(/https:\/\/([^.]+)\.supabase\.co/);
    return match ? match[1] : '';
  } catch (error) {
    return '';
  }
};

// Get Supabase configuration from environment variables
const configuredSupabaseUrl = getEnvVar('REACT_APP_SUPABASE_URL', 
  getEnvVar('VITE_SUPABASE_URL', 
    getEnvVar('SUPABASE_URL', 
      'https://djsjlwgtyfzhcnbvoubo.supabase.co' // Fallback to known working URL
    )
  )
);

const configuredSupabaseAnonKey = getEnvVar('REACT_APP_SUPABASE_ANON_KEY',
  getEnvVar('VITE_SUPABASE_ANON_KEY',
    getEnvVar('SUPABASE_ANON_KEY',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRqc2psd2d0eWZ6aGNuYnZvdWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4MzgyMzksImV4cCI6MjA3MDQxNDIzOX0.v2FKOZ20K3jpxAIT8hMRxeb6jnMLVdJtH0-VSTAOHZ8' // Fallback to known working key
    )
  )
);

// Extract project ID
const extractedProjectId = extractProjectId(configuredSupabaseUrl);

// Export the configuration
export const projectId = extractedProjectId || 'djsjlwgtyfzhcnbvoubo';
export const publicAnonKey = configuredSupabaseAnonKey;

// Export full URL for convenience
export const supabaseUrl = configuredSupabaseUrl;

// Debug logging in development
if (typeof window !== 'undefined') {
  const isDevelopment = window.location.hostname === 'localhost' || 
                       window.location.hostname === '127.0.0.1';
  
  if (isDevelopment) {
    console.log('🔧 Supabase Configuration:', {
      projectId: projectId,
      url: configuredSupabaseUrl,
      hasAnonKey: !!configuredSupabaseAnonKey,
      keyPrefix: configuredSupabaseAnonKey ? configuredSupabaseAnonKey.substring(0, 10) + '...' : 'Not set'
    });
    
    // Warn if using fallback values
    if (configuredSupabaseUrl === 'https://djsjlwgtyfzhcnbvoubo.supabase.co') {
      console.warn('⚠️ Using fallback Supabase URL. Set REACT_APP_SUPABASE_URL or SUPABASE_URL environment variable.');
    }
    
    if (configuredSupabaseAnonKey.startsWith('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRqc2psd2d0eWZ6aGNuYnZvdWJvIiwicm9sZSI6ImFub24i')) {
      console.warn('⚠️ Using fallback Supabase anon key. Set REACT_APP_SUPABASE_ANON_KEY or SUPABASE_ANON_KEY environment variable.');
    }
  }
}

// Validation function
export const validateSupabaseConfig = (): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  if (!configuredSupabaseUrl || configuredSupabaseUrl === 'your-project-url-here') {
    errors.push('Supabase URL is not configured');
  } else if (!configuredSupabaseUrl.includes('.supabase.co')) {
    errors.push('Supabase URL format appears invalid');
  }
  
  if (!configuredSupabaseAnonKey || configuredSupabaseAnonKey === 'your-anon-key-here') {
    errors.push('Supabase anon key is not configured');
  } else if (!configuredSupabaseAnonKey.startsWith('eyJ')) {
    errors.push('Supabase anon key format appears invalid (should be a JWT)');
  }
  
  if (!projectId) {
    errors.push('Could not extract project ID from Supabase URL');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};